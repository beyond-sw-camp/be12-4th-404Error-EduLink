pipeline {
    agent any

    options {
        timestamps()
    }

    environment {
        IMAGE_NAME = 'mstar228/edulink-backend'
        IMAGE_TAG = "1.0.${BUILD_NUMBER}"
        KUBE_HOST = 'test@192.0.2.7'
        PATH = "/usr/local/bin:${env.PATH}"
        DEPLOY_COLOR = 'green'    // 기본값 설정
        OTHER_COLOR = 'blue'
    }

    stages {
        stage('Start Timer') {
            steps {
                script {
                    startTime = System.currentTimeMillis()
                }
            }
        }

        stage('Git Clone') {
            steps {
                echo "Cloning Repository"
                git url: 'https://github.com/beyond-sw-camp/be12-4th-404Error-EduLink.git',
                    branch: "${env.GIT_BRANCH.replace('origin/', '')}"
            }
            post {
                success {
                    sendDiscordMessage("✅ Git Clone 성공!", "Git Repository 클론 완료", "GREEN")
                }
                failure {
                    sendDiscordMessage("❌ Git Clone 실패!", "Git Repository 클론 중 오류 발생", "RED")
                }
            }
        }

        stage('Gradle Build') {
            steps {
                echo "Building Project"
                sh '''
                    echo "Add Permission"
                    chmod +x ${WORKSPACE}/backend/gradlew
                    echo "Cleaning previous build"
                    rm -rf ${WORKSPACE}/backend/build
                    echo "Running Gradle build"
                    cd ${WORKSPACE}/backend && ./gradlew bootJar
                '''
            }
            post {
                success {
                    sendDiscordMessage("✅ Gradle Build 성공!", "Spring Boot 빌드 완료", "GREEN")
                }
                failure {
                    sendDiscordMessage("❌ Gradle Build 실패!", "Spring Boot 빌드 중 오류 발생", "RED")
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker Image ${IMAGE_NAME}:${IMAGE_TAG}"
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "${WORKSPACE}/backend")
                }
            }
            post {
                success {
                    sendDiscordMessage("✅ Docker Build 성공!", "Docker 이미지 빌드 완료", "GREEN")
                }
                failure {
                    sendDiscordMessage("❌ Docker Build 실패!", "Docker 이미지 빌드 중 오류 발생", "RED")
                }
            }
        }

        stage('Push to Registry') {
            steps {
                script {
                    echo "Pushing Docker Image ${IMAGE_NAME}:${IMAGE_TAG} to Registry"
                    withDockerRegistry([credentialsId: 'DOCKER_HUB']) {
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push('latest')
                    }
                }
            }
            post {
                success {
                    sendDiscordMessage("✅ Docker Push 성공!", "Docker 이미지 푸시 완료", "GREEN")
                }
                failure {
                    sendDiscordMessage("❌ Docker Push 실패!", "Docker 이미지 푸시 중 오류 발생", "RED")
                }
            }
        }

        stage('Determine Deploy Color') {
            steps {
                script {
                    // 기본값 설정
                    def deployColor = 'green'
                    def otherColor = 'blue'

                    try {
                        // Blue 배포 상태 확인
                        def blueReady = sh(
                            script: "ssh ${KUBE_HOST} 'kubectl get deployment backend-deployment-blue -o jsonpath=\"{.status.readyReplicas}\"' || echo '0'",
                            returnStdout: true
                        ).trim()

                        // Green 배포 상태 확인
                        def greenReady = sh(
                            script: "ssh ${KUBE_HOST} 'kubectl get deployment backend-deployment-green -o jsonpath=\"{.status.readyReplicas}\"' || echo '0'",
                            returnStdout: true
                        ).trim()

                        echo "Blue ready replicas: ${blueReady}"
                        echo "Green ready replicas: ${greenReady}"

                        // 현재 배포 상태에 따라 배포 색상 결정
                        if (blueReady == '0' && greenReady != '0') {
                            chosenColor = 'blue'
                            alternateColor = 'green'
                        } else if (blueReady != '0' && greenReady == '0') {
                            chosenColor = 'green'
                            alternateColor = 'blue'
                        }

                        env.DEPLOY_COLOR = chosenColor
                        env.OTHER_COLOR = alternateColor

                        echo "Deploying ${env.DEPLOY_COLOR} version (scaling down ${env.OTHER_COLOR} later)"
                    } catch (Exception e) {
                        echo "Error determining deploy color: ${e.getMessage()}"
                        // 예외 발생 시 기본값 유지
                        env.DEPLOY_COLOR = 'green'
                        env.OTHER_COLOR = 'blue'
                    }
                }
            }
            post {
                success {
                    sendDiscordMessage("✅ 배포 색상 결정 완료!", "${env.DEPLOY_COLOR} 버전으로 배포 진행", "GREEN")
                }
                failure {
                    sendDiscordMessage("❌ 배포 색상 결정 실패!", "색상 결정 중 오류 발생", "RED")
                }
            }
        }

        stage('Deploy Blue-Green') {
            when {
                expression { env.GIT_BRANCH == 'origin/kms/main' }
            }
            steps {
                script {
                    // 배포 색상 최종 확인 및 기본값 설정
                    def deployColor = env.DEPLOY_COLOR ?: 'green'
                    def otherColor = env.OTHER_COLOR ?: 'blue'

                    echo "Deploying ${deployColor} version"

                    // 1. 업데이트할 배포 파일의 이미지 태그 변경 및 전송
                    sh """
                        sed -i "s/latest/${IMAGE_TAG}/g" ${WORKSPACE}/backend/k8s/backend-deployment-${deployColor}.yml
                    """
                    sh """
                        scp ${WORKSPACE}/backend/k8s/backend-deployment-${deployColor}.yml ${KUBE_HOST}:/home/test/backend/k8s/
                    """

                    // 2. 새 배포(deployColor)를 적용하고 스케일 업 (기존 파드 유지)
                    sh """
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/backend-deployment-${deployColor}.yml'
                        ssh ${KUBE_HOST} 'kubectl scale deployment backend-deployment-${deployColor} --replicas=2'
                    """

                    // 3. 새 배포의 롤아웃 상태를 체크하여 완전 준비될 때까지 대기
                    sh """
                        ssh ${KUBE_HOST} 'kubectl rollout status deployment/backend-deployment-${deployColor} --timeout=5m'
                    """

                    // 4. 새 배포가 완전히 준비되면 서비스의 selector를 업데이트하여 트래픽을 새 배포로 전환
                    sh """
                        sed -i "s/app: backend-[^\\"]*/app: backend-${deployColor}/g" ${WORKSPACE}/backend/k8s/backend-svc.yml
                    """
                    sh """
                        scp ${WORKSPACE}/backend/k8s/backend-svc.yml ${KUBE_HOST}:/home/test/backend/k8s/
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/backend-svc.yml'
                        ssh ${KUBE_HOST} 'kubectl scale deployment backend-deployment-${otherColor} --replicas=0'
                    """
                }
            }
            post {
                success {
                    sendDiscordMessage("✅ Blue-Green 배포 성공!", "${env.DEPLOY_COLOR} 버전 배포 완료", "GREEN")
                }
                failure {
                    sendDiscordMessage("❌ Blue-Green 배포 실패!", "배포 중 오류 발생", "RED")
                }
            }
        }

        stage('End Timer') {
            steps {
                script {
                    def endTime = System.currentTimeMillis()
                    def duration = (endTime - startTime) / 1000
                    echo "⏱️ 전체 파이프라인 실행 시간: ${duration}초"
                }
            }
        }
    }

    post {
        success {
            script {
                def endTime = System.currentTimeMillis()
                def duration = (endTime - startTime) / 1000
                sendDiscordMessage("🎉 전체 파이프라인 성공!", "⏱️ 실행 시간: ${duration}초", "GREEN")
            }
        }
        failure {
            script {
                def endTime = System.currentTimeMillis()
                def duration = (endTime - startTime) / 1000
                sendDiscordMessage("🚨 전체 파이프라인 실패!", "⏱️ 실행 시간: ${duration}초", "RED")
            }
        }
    }
}

// 전역 함수 선언 (pipeline 외부)
def sendDiscordMessage(String title, String description, String color) {
    withCredentials([string(credentialsId: 'Discord-Webhook', variable: 'DISCORD')]) {
        discordSend(
            description: description,
            footer: "Jenkins CI/CD",
            link: env.BUILD_URL,
            result: currentBuild.currentResult,
            title: title,
            color: color,
            webhookURL: "$DISCORD"
        )
    }
}
