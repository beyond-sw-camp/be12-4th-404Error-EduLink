pipeline {
    agent any

    environment {
        IMAGE_NAME = 'mstar228/edulink-backend'
        IMAGE_TAG = "1.0.${BUILD_NUMBER}"
        KUBE_HOST = 'test@192.0.2.7'
        PATH = "/usr/local/bin:${env.PATH}"
    }

    stages {
        stage('Git Clone') {
            steps {
                echo "Cloning Repository"
                git url: 'https://github.com/beyond-sw-camp/be12-4th-404Error-EduLink.git',
                    branch: "${env.GIT_BRANCH.replace('origin/', '')}"
            }
        }
        stage('Gradle Build') {
            steps {
                echo "Building Project"
                sh '''
                    echo "Add Permission"
                    chmod +x ${WORKSPACE}/backend/gradlew
                    echo "Cleaning previous build"
                    rm -rf ${WORKSPACE}/backend/build
                    echo "Running Gradle build"
                    cd ${WORKSPACE}/backend && ./gradlew bootJar
                '''
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker Image ${IMAGE_NAME}:${IMAGE_TAG}"
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "${WORKSPACE}/backend")
                }
            }
        }
        stage('Push to Registry') {
            steps {
                script {
                    echo "Pushing Docker Image ${IMAGE_NAME}:${IMAGE_TAG} to Registry"
                    withDockerRegistry([credentialsId: 'DOCKER_HUB']) {
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                    }
                }
            }
        }
        stage('Determine Deploy Color') {
            steps {
                script {
                    // 기본 네임스페이스에서 svc를 조회
                    def svcSelector = sh(
                        script: "ssh ${KUBE_HOST} 'kubectl get svc backend-svc -o jsonpath=\"{.spec.selector.deployment}\"' || echo ''",
                        returnStdout: true
                    ).trim()
                    if (!svcSelector) {
                        echo "Service 'backend-svc' not found. Installing backend config..."
                        // 기본 YAML 파일들을 적용하여 서비스를 생성합니다.
                        sshPublisher(
                            publishers: [
                                sshPublisherDesc(
                                    configName: 'k8s',
                                    verbose: true,
                                    transfers: [
                                        sshTransfer(
                                            sourceFiles: 'backend/k8s/backend-cm.yml',
                                            remoteDirectory: '/',
                                            execCommand: "sed -i \"s/latest/${IMAGE_TAG}/g\" backend/k8s/backend-cm.yml"
                                        ),
                                        sshTransfer(
                                            sourceFiles: 'backend/k8s/backend-svc.yml',
                                            remoteDirectory: '/',
                                            execCommand: "sed -i \"s/latest/${IMAGE_TAG}/g\" backend/k8s/backend-svc.yml"
                                        ),
                                        sshTransfer(
                                            sourceFiles: 'backend/k8s/backend-deployment-blue.yml',
                                            remoteDirectory: '/',
                                            execCommand: "sed -i \"s/latest/${IMAGE_TAG}/g\" backend/k8s/backend-deployment-blue.yml"
                                        ),
                                        sshTransfer(
                                            execCommand: "kubectl apply -f /home/test/backend/k8s/backend-cm.yml"
                                        ),
                                        sshTransfer(
                                            execCommand: "kubectl apply -f /home/test/backend/k8s/backend-svc.yml"
                                        ),
                                        sshTransfer(
                                            execCommand: "kubectl apply -f /home/test/backend/k8s/backend-deployment-blue.yml"
                                        )
                                    ]
                                )
                            ]
                        )
                        sleep time: 10, unit: 'SECONDS'
                        svcSelector = sh(
                            script: "ssh ${KUBE_HOST} 'kubectl get svc backend-svc -o jsonpath=\"{.spec.selector.deployment}\"' || echo ''",
                            returnStdout: true
                        ).trim()
                        if (!svcSelector) {
                            echo "Service still not found. Defaulting current deployment color to 'blue'."
                            svcSelector = 'blue'
                        }
                    }
                    echo "Current deployment color: ${svcSelector}"
                    def deployColor = (svcSelector == 'blue') ? 'green' : 'blue'
                    def otherColor = (deployColor == 'blue') ? 'green' : 'blue'
                    echo "Deploying ${deployColor} version (scaling down ${otherColor})"
                    // 저장: 전역 변수 사용 (def 키워드로 지역 변수 선언 후 환경 변수에 저장)
                    def currentDeployColor = deployColor
                    def currentOtherColor = otherColor
                    echo "Set currentDeployColor=${currentDeployColor}, currentOtherColor=${currentOtherColor}"
                    env.DEPLOY_COLOR = currentDeployColor
                    env.OTHER_COLOR = currentOtherColor
                }
            }
        }
        stage('Deploy Blue-Green') {
            when {
                expression { env.GIT_BRANCH == 'origin/kms/main' }
            }
            steps {
                script {
                    if (!env.DEPLOY_COLOR) {
                        error "Deployment color not determined!"
                    }

                    def otherDeploymentExists = sh(
                        script: "ssh ${KUBE_HOST} 'kubectl get deployment backend-deployment-${env.OTHER_COLOR} -o jsonpath=\"{.status.readyReplicas}\"'",
                        returnStdout: true
                    ).trim()

                    sh """
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/backend-cm.yml'
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/backend-svc.yml'
                    """

                    sh """
                        sed -i "s/latest/${IMAGE_TAG}/g" ${WORKSPACE}/backend/k8s/backend-deployment-${env.DEPLOY_COLOR}.yml
                    """

                    sh """
                        scp ${WORKSPACE}/backend/k8s/backend-deployment-${env.DEPLOY_COLOR}.yml ${KUBE_HOST}:/home/test/backend/k8s/
                    """

                    sh """
                        if [ "${otherDeploymentExists}" = "" ]; then
                            # 다른 배포가 없으면 새 배포를 2개 replicas로 생성
                            ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/backend-deployment-${env.DEPLOY_COLOR}.yml'
                            ssh ${KUBE_HOST} 'kubectl scale deployment backend-deployment-${env.DEPLOY_COLOR} --replicas=2'
                        else
                             # 다른 배포가 있으면 스케일 다운
                            ssh ${KUBE_HOST} 'kubectl scale deployment backend-deployment-${env.OTHER_COLOR} --replicas=0'

                            ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/backend-deployment-${env.DEPLOY_COLOR}.yml'
                            ssh ${KUBE_HOST} 'kubectl scale deployment backend-deployment-${env.DEPLOY_COLOR} --replicas=2'
                        fi
                    """

                    sh """
                        ssh ${KUBE_HOST} 'kubectl rollout status deployment/backend-deployment-${env.DEPLOY_COLOR} --timeout=5m || kubectl get pods'
                    """
                }
            }
        }
    }
}
