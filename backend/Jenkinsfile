pipeline {
    agent any

    environment {
        IMAGE_NAME = 'mstar228/edulink-backend'
        IMAGE_TAG = "1.0.${BUILD_NUMBER}"
        KUBE_HOST = 'test@192.0.2.7'
        PATH = "/usr/local/bin:${env.PATH}"
    }

    stages {
        stage('Git Clone') {
            steps {
                echo "Cloning Repository"
                git url: 'https://github.com/beyond-sw-camp/be12-4th-404Error-EduLink.git',
                    branch: "${env.GIT_BRANCH.replace('origin/', '')}"
            }
        }
        stage('Gradle Build') {
            steps {
                echo "Building Project"
                sh '''
                    echo "Add Permission"
                    chmod +x ${WORKSPACE}/backend/gradlew
                    echo "Cleaning previous build"
                    rm -rf ${WORKSPACE}/backend/build
                    echo "Running Gradle build"
                    cd ${WORKSPACE}/backend && ./gradlew bootJar
                '''
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker Image ${IMAGE_NAME}:${IMAGE_TAG}"
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}", "${WORKSPACE}/backend")
                }
            }
        }
        stage('Push to Registry') {
            steps {
                script {
                    echo "Pushing Docker Image ${IMAGE_NAME}:${IMAGE_TAG} to Registry"
                    withDockerRegistry([credentialsId: 'DOCKER_HUB']) {
                        docker.image("${IMAGE_NAME}:${IMAGE_TAG}").push()
                    }
                }
            }
        }
        stage('Determine Deploy Color') {
            steps {
                script {
                    // 각 배포(blue, green)의 ready replica 수를 조회해 현재 활성화된 배포 색상을 판단합니다.
                    def blueReady = sh(
                        script: "ssh ${KUBE_HOST} 'kubectl get deployment backend-deployment-blue -o jsonpath=\"{.status.readyReplicas}\"' || echo '0'",
                        returnStdout: true
                    ).trim()
                    def greenReady = sh(
                        script: "ssh ${KUBE_HOST} 'kubectl get deployment backend-deployment-green -o jsonpath=\"{.status.readyReplicas}\"' || echo '0'",
                        returnStdout: true
                    ).trim()
                    echo "Blue ready replicas: ${blueReady}"
                    echo "Green ready replicas: ${greenReady}"

                    // 현재 활성화된 배포 색상을 판단합니다.
                    // 둘 다 0이면 기본값으로 blue를 가정합니다.
                    def currentDeployColor = (blueReady && blueReady != '0') ? 'blue' : (greenReady && greenReady != '0') ? 'green' : 'blue'
                    echo "Current deployment color: ${currentDeployColor}"

                    // 새로 배포할 색상은 현재 활성화된 색상의 반대가 됩니다.
                    def deployColor = (currentDeployColor == 'blue') ? 'green' : 'blue'
                    def otherColor = (deployColor == 'blue') ? 'green' : 'blue'
                    echo "Deploying ${deployColor} version (scaling down ${otherColor} later)"

                    env.DEPLOY_COLOR = deployColor
                    env.OTHER_COLOR = otherColor
                }
            }
        }
        stage('Deploy Blue-Green') {
            when {
                expression { env.GIT_BRANCH == 'origin/kms/main' }
            }
            steps {
                script {
                    if (!env.DEPLOY_COLOR) {
                        error "Deployment color not determined!"
                    }

                    // 1. 업데이트할 배포 파일의 이미지 태그 변경 및 전송
                    sh """
                        sed -i "s/latest/${IMAGE_TAG}/g" ${WORKSPACE}/backend/k8s/backend-deployment-${env.DEPLOY_COLOR}.yml
                    """
                    sh """
                        scp ${WORKSPACE}/backend/k8s/backend-deployment-${env.DEPLOY_COLOR}.yml ${KUBE_HOST}:/home/test/backend/k8s/
                    """

                    // 2. 새 배포(DEPLOY_COLOR)를 적용하고 스케일 업 (기존 파드 유지)
                    sh """
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/backend-deployment-${env.DEPLOY_COLOR}.yml'
                        ssh ${KUBE_HOST} 'kubectl scale deployment backend-deployment-${env.DEPLOY_COLOR} --replicas=2'
                    """

                    // 3. 새 배포의 롤아웃 상태를 체크하여 완전 준비될 때까지 대기
                    sh """
                        ssh ${KUBE_HOST} 'kubectl rollout status deployment/backend-deployment-${env.DEPLOY_COLOR} --timeout=5m'
                    """

                    // 4. 새 배포가 완전히 준비되면 서비스의 selector를 업데이트하여 트래픽을 새 배포로 전환
                    sh """
                        sed -i "s/deployment: .*/deployment: ${DEPLOY_COLOR}/g" ${WORKSPACE}/backend/k8s/backend-svc.yml
                    """
                    sh """
                        ssh ${KUBE_HOST} 'kubectl apply -f /home/test/backend/k8s/backend-svc.yml'
                    """

                    // 5. 이후 기존 배포(OTHER_COLOR)의 파드를 스케일 다운하여 트래픽이 완전히 새 배포로 이전되도록 합니다.
                    sh """
                        ssh ${KUBE_HOST} 'kubectl scale deployment backend-deployment-${env.OTHER_COLOR} --replicas=0'
                    """
                }
            }
        }
    }
}
